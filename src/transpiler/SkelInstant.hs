-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelInstant where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsInstant

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsInstant.Ident -> Result
transIdent x = case x of
  AbsInstant.Ident string -> failure x

transProgram :: Show a => AbsInstant.Program' a -> Result
transProgram x = case x of
  AbsInstant.Prog _ stmts -> failure x

transStmt :: Show a => AbsInstant.Stmt' a -> Result
transStmt x = case x of
  AbsInstant.SAss _ ident exp -> failure x
  AbsInstant.SExp _ exp -> failure x

transExp :: Show a => AbsInstant.Exp' a -> Result
transExp x = case x of
  AbsInstant.ExpAdd _ exp1 exp2 -> failure x
  AbsInstant.ExpSub _ exp1 exp2 -> failure x
  AbsInstant.ExpMul _ exp1 exp2 -> failure x
  AbsInstant.ExpDiv _ exp1 exp2 -> failure x
  AbsInstant.ExpLit _ integer -> failure x
  AbsInstant.ExpVar _ ident -> failure x
